compiling a dynamic module into nginx on ubuntu

0. install nginx: apt-get install nginx. this will serve as baseline config for us. note that by default (on ubuntu, anyways)
the nginx version that gets installed is "stable", not "mainline". its ususally a litttle old, so you might want to get "mainline" instead. refer to this doc: https://gist.github.com/craigvantonder/729fc169ae087918e6de744f420adf8b

1. determine which nginx version you need to compile - run "nginx -v" to find out.
nginx version: nginx/1.14.0 (Ubuntu)

2. download the nginx source files - you'll need to compile them
wget http://nginx.org/download/nginx-1.14.0.tar.gz

3. untar it
tar -xvzf nginx-1.14.0.tar.gz

4. sudo su

5. install deps for make:
apt-get update
apt-get install -y libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev gcc linux-kernel-headers make dpkg-dev

6. run the configure script inside the nginx folder. it should complete succesfully
7. run make, it should end succesfully. we're just testing to see that all works fine and that we have all the prerequisites for nginx compilation.

congrats - you built a vanilla nginx! the finished binary is in ./objs/

8. now we're going to build just the dynamic module.
9. download the module. in our case, its 
git clone https://github.com/kinecosystem/nginx-statsd.git. clone it next to the nginx folder (not inside it)

10. run nginx -V, to see all the compilation flags of the nginx you're already using. we're going to recompile nginx with all the flags - plus the dynamic module. 

note that as per the flags abobe, compiled dynamic modules are expected to be in /usr/lib/nginx/modules.

11. run the configure command again, but this time add all the flags from the previous step AND another one: --add-dynamic-module=../nginx-statsd . this will mimic the same definitions as the nginx you've installed with 'apt-get' and also add in our dynamic module. note that I had some issues with 1.15.8 until I apt-get installed dpkg-dev

12. run 'make modules'. this will build the module. it'll be in the ./objs/ folder
 
13. copy the ngx_http_statsd_module.so file from objs to where nginx modules are expected - /usr/lib/nginx/modules/ (this value is set into the configure script)


14. now lets configure nginx to use our new module. add this line somewhere in the top of the file: load_module modules/ngx_http_statsd_module.so;

15. nginx should be able to start correctly now. try it: service nginx restart

16. lets modify nginx config to actually use the module: edit /etc/nginx/sites-enabled/default. 
a. add the line 'statsd_server localhost;' somewhere in the top
b. replace the contents of location /, with this:
proxy_pass http://localhost:8000; 
statsd_timing "your_product.$request_method.index_response_time" "$upstream_response_time";

17. reload nginx config: nginx -s reload

18. lets setup a slow server at port 8000: copy the webserver.py file from github and run it locally: python webserver.py (its for python2, run with python webserver.py 8000 and test with curl localhost:8000). it needs to be slow, because the nginx statsd plugin does not output anything for requests that take zeo time. so the webserver generates a delay.

19. for statsd you'll need node.js: 
curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
sudo apt-get install -y nodejs

20. now lets setup a local statsd server: see instructions here: https://anomaly.io/statsd-install-and-config/ . Basically: git clone https://github.com/etsy/statsd.git , cd statsd, create a file 'config.js' with contents: { port: 8125, mgmt_port: 8126, backends: [ "./backends/console" ]} and run the whole thing with 'node stats.js config.js'

to sum: now we have an nginx listening on port 80 which (1) forwards to port 8000 (where a slow webserver resides and outputs stats to a local statsd at port 8125 which sends stuff to the console). when a request (curl localhost:80/ -XGET) goes to nginx, it gets forwarded to 8000, delayed in the web server and returns back to nginx on its way out. then nginx shoots the stats into port 8125 and statsd sends them to the console. you should see something like: 



  timer_data:
   { 'your_product.GET.index_response_time':
      { count_90: 2,
        mean_90: 1002,
        upper_90: 1004,
        sum_90: 2004,
        sum_squares_90: 2008016,
        std: 2,
        upper: 1004,
        lower: 1000,
        count: 2,
        count_ps: 0.2,
        sum: 2004,
        sum_squares: 2008016,
        mean: 1002,
        median: 1002 } },
  counter_rates:
   { 'statsd.bad_lines_seen': 0,
     'statsd.packets_received': 0.2,
     'statsd.metrics_received': 0.2 },
  sets: {},


you can also send requests with -XPOST and get the timer for post
